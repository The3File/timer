#!/usr/bin/env bash
# a timer for measuring time - written in pure bash
# https://github.com/the3file

clean_exit(){ [[ $bell ]] && kill $bell; printf '\e[?25h'; }

usage(){ 
	cat >&2 <<-END
		$basename: $1: invalid argument
		usage: $basename [<hrs|mins|secs>{h|m|s}] [<hrs>:<mins>]
	END
}

notify_complete(){
	printf '\r\e[K%s\e[m\n' "times up!"
	notify-send "$basename: $_"
	hash paplay &>/dev/null && play_sound
	for i in {0..3};{ read -st .15 -p $'\a';}
}

play_sound(){
	sound="/usr/share/sounds/freedesktop/stereo/alarm-clock-elapsed.oga"
	while wait;do trap 'kill -9 $p' EXIT; paplay $sound & p=$!; done & bell=$!
	read -rs; exit 0
}

print_time(){
	printf '\e[K\e[?25l\e[1m\r%02d:%02d:%02d' "$((s/3600))" "$((s/60%60))" "$((s%60))"
	read -st 1
}

parse_colons(){
	printf -v ch '%(%-H)T' "-1"
	printf -v cm '%(%-M)T' "-1"
	printf -v cs '%(%-S)T' "-1"

	m="${1##*:}"; h="${1%%:$m}"
	((h=h<12?h+24:h,c=(m*60+h*3600)-(cs+cm*60+ch<12?ch+24:ch*3600)))
}

get_opts(){
	while [[ $1 ]]; do case $1 in
		[0-9][0-9]':'[0-9][0-9]) parse_colons "$1" ;;
		*[0-9]'h') ((c+=${1%h}*3600)) ;;
		*[0-9]'m') ((c+=${1%m}*60)) ;;
		*[0-9]'s') ((c+=${1%s})) ;;
		*) usage "$1"; exit 1
	esac; shift; done
}

timer(){
	for ((st=SECONDS,s=c;s>=0;t=SECONDS,s=c?c-(t-st):t-st)){ print_time;}
	notify_complete
}

main(){
	trap 'clean_exit' EXIT
	get_opts "$@"
	timer
}

basename="${0##*/}"
main "$@"
