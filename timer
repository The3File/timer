#!/usr/bin/env bash
# a timer for measuring time
# https://github.com/the3file

usage(){ 
	cat >&2 <<-EOF
		$basename: $1: invalid argument
		usage: $basename [<hrs|mins|secs>{h|m|s}] [[<hrs>:]<mins>:<secs>]
	EOF
}

disable_cursor(){
	stty -echo
	printf '\e[?25l'
}

reset_cursor(){
	stty echo
	printf '\e[?25h'
}

parse_colons(){
	s="${1##*:}"

	: "${1%%:$s}"
	m="${_##*:}"

	: "${1%%$m:$s}"
	h="${_%:}"
}

notify_complete(){
	printf '\a\r\e[K%s\e[m\n' "times up!"
	notify-send "${0//$HOME/\~}: $_"
	play_bell &>/dev/null
}

play_bell(){
	bell_dir="/usr/share/sounds/freedesktop/stereo"
	bell="${bell_dir}/alarm-clock-elapsed.oga"
	coproc paplay $bell
}

kill_bell(){
	[[ $COPROC_PID ]] || return
	kill -9 $COPROC_PID
	wait $_ &>/dev/null
}

timer(){ 
	for ((st=SECONDS,s=c;s>=0;s=c?c-(SECONDS-st):SECONDS-st)){
		printf '\e[1;34m\r\e[K%02d:%02d:%02d'\
			"$((s/3600))" "$((s/60%60))" "$((s%60))"
		sleep 1
	}
}

get_opts(){
	while [ $1 ]; do
		case $1 in
			*[0-9]':'[0-9][0-9]) parse_colons $1
				((c+=(h*3600)+(m*60)+s)) ;;
			*[0-9]'h') ((c+=${1%h}*3600)) ;;
			*[0-9]'m') ((c+=${1%m}*60)) ;;
			*[0-9]'s') ((c+=${1%s})) ;;
			*) usage "$1"; exit 1
		esac; shift
	done
}

main(){
	trap "kill_bell; reset_cursor" EXIT
	basename="${0##*/}"
	get_opts "$@"
	disable_cursor
	timer
	notify_complete
}

main "$@"
