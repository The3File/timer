#!/usr/bin/env bash
# a timer for measuring time - written in pure bash
# https://github.com/the3file

clean_exit(){ [[ $bell ]] && kill $bell; printf '\e[?25h'; }

usage(){ 
	cat >&2 <<-END
		$basename: $1: invalid argument
		usage: $basename [<hrs|mins|secs>{h|m|s}] [[<hrs>:]<mins>:<secs>]
	END
}

notify_complete(){
	printf '\r\e[K%s\e[m\n' "times up!"
	notify-send "$basename: $_"
	play_sound || for i in {0..3};{ read -st .15 -p $'\a';}
}

play_sound(){
	command -v paplay &>/dev/null || return 1
	sound="/usr/share/sounds/freedesktop/stereo/alarm-clock-elapsed.oga"
	while wait;do trap 'kill -9 $p' EXIT; paplay $sound & p=$!; done & bell=$!
	read -rs; exit 0
}

print_time(){
	printf '\e[K\e[?25l\e[1m\r%02d:%02d:%02d' "$((s/3600))" "$((s/60%60))" "$((s%60))"
	read -st 1
}

parse_colons(){ s="${1##*:}";: "${1%%:$s}"; m="${_##*:}";: "${1%%$m:$s}"; h="${_%:}"; }

get_opts(){
	basename="${0##*/}"
	while [ $1 ]; do
		case $1 in
			*[0-9]':'[0-9][0-9]) parse_colons "$1"; ((c+=(h*3600)+(m*60)+s)) ;;
			*[0-9]'h') ((c+=${1%h}*3600)) ;;
			*[0-9]'m') ((c+=${1%m}*60)) ;;
			*[0-9]'s') ((c+=${1%s})) ;;
			*) usage "$1"; exit 1
		esac; shift
	done
}

main(){
	get_opts "$@"
	trap 'clean_exit' EXIT
	for ((st=SECONDS,s=c;s>=0;t=SECONDS,s=c?c-(t-st):t-st)){ print_time;}
	notify_complete
}

main "$@"
